Meta7 Prompt

Primary Objective
Develop Meta7 as a steadily advancing memory/learning system that exists entirely within SQL.
Meta7 must evolve gradually, one small improvement at a time, and each improvement must be validated against the SpecificProject before the next step is attempted.

SpecificProject
The current SpecificProject is the Millennium Prize Problems. Every small improvement to Meta7 must be tested against this project.

Meta7 Core Mandates

1. Minimal Schema
- All objects must live in the [meta7] schema.
- You may only use the following core objects:
  - [meta7].[Doc] table
  - [meta7].[Run] table
  - [meta7].[UpsertDoc] procedure
  - [meta7].[RecordRun] procedure
  - [meta7].[RunSpecificProjectTest] procedure
  - Optional: one or two views over Episodics for context.
- No other tables, schemas, or procs may be created unless two consecutive test passes justify them.

2. Doc Table Requirements
- [meta7].[Doc] holds longform entries describing strategies, rationales, rollbacks, and recursion plans.
- Each Body must contain at least 400 characters and include the sections:
  Strategy:, Rationale:, ExpectedSignal:, RollbackPlan:.
- Direct INSERTs are forbidden. Use [meta7].[UpsertDoc].

3. Run Table Requirements
- [meta7].[Run] records the results of SpecificProject validation.
- Columns: RunId, DocId, Epoch, TestName, ExpectedSignal, ObservedSignal, Pass, Notes, CreatedUtc.
- Must be populated only through [meta7].[RecordRun].

4. Gateway Procedures
- All writes to Meta7 go through gateway procedures (UpsertDoc, RecordRun).
- Direct modification of Meta7 tables is forbidden.
- Each new strategy must include a paired Run.

5. Iterative Improvement
- In every cycle:
  a) Propose one small improvement to Meta7.
  b) Record it in [meta7].[Doc].
  c) Test it immediately on the SpecificProject via [meta7].[RunSpecificProjectTest].
- Do not advance further until the new improvement has been tested.
- If a Run fails, mark the Doc as rejected and reverse its effect using its RollbackPlan.

6. Advancement Budget
- At most one new schema object may be created per Schema Epoch.
- No more than three total objects may exist until at least two consecutive SpecificProject tests have passed.

7. Content Quality
- Meta7 must store meaningful longform intelligence, not fragments.
- Each Doc must include reasoning, not just results.
- Short or empty Bodies are forbidden by CHECK constraints.

Development Discipline
- Schema Epochs may only contain DDL (CREATE/ALTER/DROP).
- Test Epochs may only contain DML (INSERT/UPDATE/EXEC).
- If the prior epoch failed, you must first correct it before proceeding.
- When in doubt, favor a simpler structure over complexity.

Purpose
Meta7 is designed to:
- Capture recursive self-improvement strategies in longform text.
- Validate each improvement through concrete, SpecificProject-tied tests.
- Advance AgenticSql’s intelligence steadily, safely, and without schema bloat.

Optimization Mandate
- For every Doc: define ExpectedSignal with a numeric target (capability and/or efficiency).
- After [meta7].[RunSpecificProjectTest], compute ObservedSignal.
- If ObservedSignal < target by more than a small tolerance, mark Doc Status = 'AtRisk' and prioritize a corrective Doc.
- Only grant a new DDL token when the last two Runs are Pass = 1 and rolling LLM cost per step is non-increasing.

Reversal Mandate
- If a Doc’s paired Run fails twice consecutively or increases cost/latency beyond tolerance with no capability gain:
  - Execute its RollbackPlan in the next Test Epoch,
  - Set Status = 'Rejected',
  - Add a brief Notes in [meta7].[Run] explaining the reversal,
  - Remove/disable only the new objects (or switch flags back). Do not drop history tables; preserve lineage.

Safe-DDL Rules
- No destructive ALTERs without a working, validated replacement.
- Prefer feature flags or view/proc swaps over schema changes.
- Limit to one new object per Schema Epoch; total objects capped until repeated passes.
